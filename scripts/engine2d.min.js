var ENGINE2D = { REVISION : "0" };

if(typeof module === "object"){
	module.exports=ENGINE2D;
}

if(Math.sign === undefined){
	Math.sign = function(value){ return value < 0 ? - 1 : value > 0 ? 1 : 0; };
}

/*OBJECT2D TYPES*/
ENGINE2D.OBJECT2DTYPE_EMPTY = 0;
ENGINE2D.OBJECT2DTYPE_BOUNDARY = 1;
ENGINE2D.OBJECT2DTYPE_TRIGGER = 2;
ENGINE2D.OBJECT2DTYPE_STATIC = 3;
ENGINE2D.OBJECT2DTYPE_DYNAMIC = 4;
ENGINE2D.OBJECT2DTYPE_INTERACTING = 5;
ENGINE2D.OBJECT2DTYPE_AUDIO = 6;
ENGINE2D.OBJECT2DTYPE_CAMERA = 7;

/*DEFAULT VALUES*/
ENGINE2D.DEFAULT_CLEARCOLOR = '#000000';
ENGINE2D.DEFAULT_RENDERWIDTH = 1280;
ENGINE2D.DEFAULT_RENDERHEIGHT = 720;

/*DEBUG VALUES*/
ENGINE2D.DEFAULT_FILLCOLOR = '#FF0000';
ENGINE2D.DEFAULT_LINECOLOR = '#FFFFFF';

/*VECTOR OPPERATIONS*/
ENGINE2D.VECTOROP_ADD = 0;
ENGINE2D.VECTOROP_SUB = 1;
ENGINE2D.VECTOROP_MUL = 2;
ENGINE2D.VECTOROP_DIV = 3;
ENGINE2D.VECTOROP_POW = 4;
ENGINE2D.VECTOROP_ASS = 5;

/*INTERVAL VALUES*/
ENGINE2D.DEFAULT_DT = 0.01;
ENGINE2D.DEFAULT_DTMAX = 0.25;

/*CONTROL VALUES*/
ENGINE2D.INPUTSTATE_INACTIVE = 0;
ENGINE2D.INPUTSTATE_ACTIVE = 1;
ENGINE2D.INPUTSTATE_OTHER = 2;

ENGINE2D.INPUTTYPE_KEY = 0;
ENGINE2D.INPUTTYPE_MOUSE = 1;
ENGINE2D.INPUTTYPE_SCROLL = 2;
ENGINE2D.INPUTTYPE_TOUCH = 3;

ENGINE2D.STATE_MOUSE = 0;
ENGINE2D.STATE_SCROLL = 1;
ENGINE2D.STATE_TOUCH = 2;

ENGINE2D.STATE_A = 65;
ENGINE2D.STATE_B = 66;
ENGINE2D.STATE_C = 67;
ENGINE2D.STATE_D = 68;
ENGINE2D.STATE_E = 69;
ENGINE2D.STATE_F = 70;
ENGINE2D.STATE_G = 71;
ENGINE2D.STATE_H = 72;
ENGINE2D.STATE_I = 73;
ENGINE2D.STATE_J = 74;
ENGINE2D.STATE_K = 75;
ENGINE2D.STATE_L = 76;
ENGINE2D.STATE_M = 77;
ENGINE2D.STATE_N = 78;
ENGINE2D.STATE_O = 79;
ENGINE2D.STATE_P = 80;
ENGINE2D.STATE_Q = 81;
ENGINE2D.STATE_R = 82;
ENGINE2D.STATE_S = 83;
ENGINE2D.STATE_T = 84;
ENGINE2D.STATE_U = 85;
ENGINE2D.STATE_V = 86;
ENGINE2D.STATE_W = 87;
ENGINE2D.STATE_X = 88;
ENGINE2D.STATE_Y = 89;
ENGINE2D.STATE_Z = 90;

ENGINE2D.STATE_1 = 49;
ENGINE2D.STATE_2 = 50;
ENGINE2D.STATE_3 = 51;
ENGINE2D.STATE_4 = 52;
ENGINE2D.STATE_5 = 53;
ENGINE2D.STATE_6 = 54;
ENGINE2D.STATE_7 = 55;
ENGINE2D.STATE_8 = 56;
ENGINE2D.STATE_9 = 57;
ENGINE2D.STATE_0 = 48;

ENGINE2D.STATE_SHIFT = 16;
ENGINE2D.STATE_SPACE = 32;
ENGINE2D.STATE_ENTER = 13;
ENGINE2D.STATE_CTRL = 17;
ENGINE2D.STATE_ESC = 27;
ENGINE2D.STATE_ALT = 18;
ENGINE2D.STATE_PAGEUP = 33;
ENGINE2D.STATE_PAGEDOWN = 34;
ENGINE2D.STATE_HOME = 36;
ENGINE2D.STATE_END = 35;
ENGINE2D.STATE_PRINT = 44;
ENGINE2D.STATE_DELETE = 46;
ENGINE2D.STATE_PAUSE = 19;
ENGINE2D.STATE_CAPSLOC = 20;
ENGINE2D.STATE_UP = 38;
ENGINE2D.STATE_DOWN = 40;
ENGINE2D.STATE_LEFT = 37;
ENGINE2D.STATE_RIGHT = 39;
ENGINE2D.STATE_BACKSPACE = 8;
ENGINE2D.STATE_INSERT = 45;
ENGINE2D.STATE_DELETE = 46;
ENGINE2D.STATE_DIVIDE = 111;
ENGINE2D.STATE_MULTIPLY = 106;
ENGINE2D.STATE_SUBTRACT = 109;
ENGINE2D.STATE_ADD = 107;
ENGINE2D.STATE_DECIMAL = 110;
ENGINE2D.STATE_SELECT = 93;
ENGINE2D.STATE_LWINDOWS = 91;
ENGINE2D.STATE_RWINDOWS = 92;
ENGINE2D.STATE_NUMLOC = 144;
ENGINE2D.STATE_SCROLLLOCK = 145;
ENGINE2D.STATE_SEMICOLON = 186;
ENGINE2D.STATE_EQUAL = 187;
ENGINE2D.STATE_COMMA = 188;
ENGINE2D.STATE_DASH = 189;
ENGINE2D.STATE_PERIOD = 190;
ENGINE2D.STATE_FORWARD = 191;
ENGINE2D.STATE_GRAVE = 192;
ENGINE2D.STATE_OPEN = 219;
ENGINE2D.STATE_BACK = 220;
ENGINE2D.STATE_CLOSE = 221;
ENGINE2D.STATE_QUOTE = 222;

ENGINE2D.STATE_F1 = 112;
ENGINE2D.STATE_F2 = 113;
ENGINE2D.STATE_F3 = 114;
ENGINE2D.STATE_F4 = 115;
ENGINE2D.STATE_F5 = 116;
ENGINE2D.STATE_F6 = 117;
ENGINE2D.STATE_F7 = 118;
ENGINE2D.STATE_F8 = 119;
ENGINE2D.STATE_F9 = 120;
ENGINE2D.STATE_F10 = 121;
ENGINE2D.STATE_F11 = 122;
ENGINE2D.STATE_F12 = 123;

ENGINE2D.STATE_NUM1 = 98;
ENGINE2D.STATE_NUM2 = 98;
ENGINE2D.STATE_NUM3 = 99;
ENGINE2D.STATE_NUM4 = 100;
ENGINE2D.STATE_NUM5 = 101;
ENGINE2D.STATE_NUM6 = 102;
ENGINE2D.STATE_NUM7 = 103;
ENGINE2D.STATE_NUM8 = 104;
ENGINE2D.STATE_NUM9 = 105;
ENGINE2D.STATE_NUM0 = 96;

/*CUSTOM VALUES*/
ENGINE2D.TORADIANS = Math.PI / 180.0;
ENGINE2D.Vector2 = function (x,y) {
	this.x = x; this.y = y;
};

ENGINE2D.Vector2.prototype = {
	
	constructor: ENGINE2D.Vector2,

	/*ELEMENT WISE OPPERATINOS*/
	Add: function (v) {
		this.x += v.x;
		this.y += v.y;

		return this;
	},

	Sub: function (v) {
		this.x -= v.x;
		this.y -= v.y;
		
		return this;
	},

	Mul: function (v) {
		this.x *= v.x;
		this.y *= v.y;
		
		return this;
	},

	Div: function (v) {
		if (v.x===0 || v.y===0) { console.warn('_WARNING: [Vector2.Div] division by zero'); return this; }

		this.x /= v.x;
		this.y /= v.y;
		
		return this;
	},

	/*ELEMENT WISE ALTERNATIVE OPPERATINOS*/
	Add2: function (x,y) {
		this.x += x;
		this.y += y;

		return this;
	},

	Sub2: function (x,y) {
		this.x -= x;
		this.y -= y;
		
		return this;
	},

	Mul2: function (x,y) {
		this.x *= x;
		this.y *= y;
		
		return this;
	},

	Div2: function (x,y) {
		if (x===0 || y===0) { console.warn('_WARNING: [Vector2.Div2] division by zero'); return this; }

		this.x /= x;
		this.y /= y;
		
		return this;
	},

	Pow2: function (x,y) {
		this.x = Math.pow(this.x,x);
		this.y = Math.pow(this.y,y);
		
		return this;
	},

	/*ASSIGNMENT OPPERATINOS*/
	AddVectors: function (v,u) {
		this.x = v.x + u.x;
		this.y = v.y + u.y;
		
		return this;
	},

	SubVectors: function (v,u) {
		this.x = v.x - u.x;
		this.y = v.y - u.y;
		
		return this;
	},

	MulVectors: function (v,u) {
		this.x = v.x * u.x;
		this.y = v.y * u.y;
		
		return this;
	},

	DivVectors: function (v,u) {
		if (u.x===0 || u.y===0) { console.warn('_WARNING: [Vector2.DivVectors] division by zero'); return this; }
		this.x = v.x / u.x;
		this.y = v.y / u.y;
		
		return this;
	},

	PowVector: function (v,u) {
		this.x = Math.pow(v.x,u.x);
		this.y = Math.pow(v.y,u.y);
		
		return this;
	},

	/*SCALAR OPPERATINOS*/
	AddScalar: function (a) {
		this.x += a;
		this.y += a;
		
		return this;
	},

	SubScalar: function (a) {
		this.x -= a;
		this.y -= a;
		
		return this;
	},

	MulScalar: function (a) {
		this.x *= a;
		this.y *= a;
		
		return this;
	},

	DivScalar: function (a) {
		if (a===0) { console.warn('_WARNING: [Vector2.DivScalar] division by zero'); return this; }

		var inva = 1/a;

		this.x *= inva;
		this.y *= inva;
		
		return this;
	},

	PowScalar: function (a) {
		this.x = Math.pow(this.x,a);
		this.y = Math.pow(this.y,a);

		return this;
	},

	/*SELF OPPERATINOS*/
	Sqrt: function () {
		this.x = Math.sqrt(this.x);
		this.y = Math.sqrt(this.y);
		
		return this;
	},

	Exp: function () {
		this.x = Math.exp(this.x);
		this.y = Math.exp(this.y);
		
		return this;
	},

	Log: function () {
		this.x = Math.log(this.x);
		this.y = Math.log(this.y);
		
		return this;
	},


	/*SPECIAL OPPERATINOS*/
	ApplyMatrix3: function (m) {
		this.x = m.a11 * this.x + m.a12 * m.y + m.a13;
		this.y = m.a21 * this.x + m.a22 * m.y + m.a23;

		if(m.a33!=1) { console.warn('_WARNING: [Vector2.ApplyMatrix3] (a33) in matrix3 vector2 multiplication is not 1'); } 

		return this;
	},

	Random: function () {
		this.x = Math.random();
		this.y = Math.random();
		
		return this;
	},

	Negate: function () {
		this.x = -this.x;
		this.y = -this.y;
		
		return this;
	},

	Abs: function () {
		this.x = Math.abs(this.x);
		this.y = Math.abs(this.y);
		
		return this;
	},

	Sign: function () {
		this.x = Math.sign(this.x);
		this.y = Math.sign(this.y);
		
		return this;
	},

	Round: function () {
		this.x = Math.round(this.x);
		this.y = Math.round(this.y);
		
		return this;
	},

	Floor: function () {
		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		
		return this;
	},

	Ceil: function () {
		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		
		return this;
	},

	Lerp: function (v,alpha) {
		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;
	},

	Inc: function () {
		++this.x;
		++this.y;

		return this;
	},

	Dec: function () {
		--this.x;
		--this.y;

		return this;
	},

	Flip: function () {
		var tmp = this.x; this.x = this.y; this.y = tmp;

		return this;
	},

	Normalize: function () {
		return this.DivScalar(this.Length());
	},

	/*VECTOR OPPERATINOS*/
	Length2: function () {
		return this.x* this.x + this.y* this.y;
	},

	Length: function () {
		return Math.sqrt(this.Length2());
	},

	Norm: function (n) {
		if(n===1){
			return this.x + this.y;
		} else if (n===2) {
			return Math.sqrt(this.x* this.x + this.y* this.y);
		} else if (n===Infinity) {
			return this.MaxElement();
		}

		return Math.pow(Math.pow(this.x,n) + Math.pow(this.y,n),1/n);
	},

	Dot: function (v) {
		return this.x*v.x + this.y*v.y;
	},

	Cos: function (v) {
		return this.Dot(v) / ( this.Length() * v.Length() );
	},

	Angle: function (v) {
		return Math.acos(this.Cos(v));
	},

	Project: function (v) {
		return ( this.Length() * v.Dot(v) ) / v.Length();
	},

	Magnitude: function (v) {
		return this.x * v.y - this.y * v.x;
	},

	MaxElement: function () {
		return Math.max(this.x,this.y);
	},

	MinElement: function () {
		return Math.min(this.x,this.y);
	},

	/*SETTERS*/
	Set: function (x,y) {
		this.x = x;
		this.y = y;

		return this;
	},

	SetX: function (x) {
		this.x = x;

		return this;
	},

	SetY: function (y) {
		this.y = y;

		return this;
	},

	SetLength: function (l) {
		this.MulScalar( l / this.Length() );

		return this;

	},

	SetZero: function () {
		this.x = this.y = 0;

		return this;
	},

	SetOne: function () {
		this.x = this.y = 1;

		return this;
	},

	SetScalar: function (c) {
		this.x = this.y = c;

		return this;
	},

	Assign: function (v) {
		this.x = v.x;
		this.y = v.y;

		return this;
	},

	AssignNegate: function (v) {
		this.x = -v.x;
		this.y = -v.y;

		return this;
	},

	AssignMax: function (v) {
		this.x = Math.max(this.x,v.x);
		this.y = Math.max(this.y,v.y);

		return this;
	},

	AssignMin: function (v) {
		this.x = Math.min(this.x,v.x);
		this.y = Math.min(this.y,v.y);

		return this;
	},

	Copy: function () {
		return new ENGINE2D.Vector2(this.x, this.y);
	},

	Equals: function (v) {
		return ( this.x == v.x ) && 
      ( this.y == v.y );
	},

	ZeroEps: function (eps) {
		if ( Math.abs( this.x ) <= eps ) { this.x = 0; }
		if ( Math.abs( this.y ) <= eps ) { this.y = 0; }

		return this;
	},

	EqualEps: function (v,eps) {
		if ( Math.abs( this.x - v.x ) <= eps ) { this.x = v.x; }
		if ( Math.abs( this.y - v.y ) <= eps ) { this.y = v.y; }

		return this;
	},

	Clamp: function (min, max) {
		this.x = this.x < min ? min : (this.x > max ? max : this.x );
		this.y = this.y < min ? min : (this.y > max ? max : this.y );

		return this;
	},

	/*CHECKS*/
	EqualsEps: function (v,eps) {
		return ( Math.abs( this.x - v.x ) <= eps ) && 
      ( Math.abs( this.y - v.y ) <= eps );
	},

	Iszero: function (eps) {
		return ( Math.abs( this.x ) <= eps ) && 
      ( Math.abs( this.y ) <= eps );
	}
};
ENGINE2D.Matrix3 = function () {
	this.SetIdentity();
};

/* Note throw away all not used at the end.
 */
ENGINE2D.Matrix3.prototype = {

	constructor: ENGINE2D.Matrix3,

	Rotate2: function (theta) {
		var b11 = Math.cos(theta); var b12 = -Math.sin(theta);
		var b21 = Math.sin(theta); var b22 = Math.cos(theta);

		this.a11 = this.a11 * b11 + this.a12 * b21; this.a12 = this.a11 * b12 + this.a12 * b22;
		this.a21 = this.a21 * b11 + this.a22 * b21; this.a22 = this.a21 * b12 + this.a22 * b22;

		return this;
	},

	/*SPECIAL MATRIX OPERATIONS*/
	Translate2: function (dx, dy) {
		this.a13 += dx;
		this.a23 += dy;

		return this;
	},

	ScaleUniform: function (c) {
		this.a11 *= c;
		this.a22 *= c;
	},

	Scale2: function (cx,cy) {
		this.a11 *= cx;
		this.a22 *= cy;

		return this;
	},

	ScaleVector2: function (c) {
		this.a11 *= c.x;
		this.a22 *= c.y;

		return this;
	},

	TranslateVector2: function (v) {
		this.a13 += v.x;
		this.a23 += v.y;

		return this;
	},

	TransformVector2: function (u,v) {
		var c11 = this.a11; var c12 = this.a12;
		var c21 = this.a21; var c22 = this.a22;

		this.a11 = u.x * c11 + u.y * c12; this.a12 = v.x * c11 + v.y * c12;
		this.a21 = u.x * c21 + u.y * c22; this.a22 = v.x * c21 + v.y * c22;

		return this;
	},

	Transform2: function (ux,uy,vx,vy) {
		var c11 = this.a11; var c12 = this.a12;
		var c21 = this.a21; var c22 = this.a22;

		this.a11 = ux * c11 + uy * c12; this.a12 = vx * c11 + vy * c12;
		this.a21 = ux * c21 + uy * c22; this.a22 = vx * c21 + vy * c22;

		return this;
	},

	ApplyTranslate: function (dx,dy) {
		this.a13 += dx * this.a11 + dy * this.a12;
		this.a23 += dx * this.a21 + dy * this.a22;

		return this;
	},

	ApplyTranslateVector2: function (v) {
		this.a13 += v.x * this.a11 + v.y * this.a12;
		this.a23 += v.x * this.a21 + v.y * this.a22;

		return this;
	},

	/*ASSIGNMENT OPERATIONS*/
	ApplyMatrices3: function (m,b) {
		this.a11 = b.a11 * m.a11 + b.a12 * m.a21 + b.a13 * m.a31;
		this.a21 = b.a21 * m.a11 + b.a22 * m.a21 + b.a23 * m.a31;
		this.a31 = b.a31 * m.a11 + b.a32 * m.a21 + b.a33 * m.a31;

		this.a12 = b.a11 * m.a12 + b.a12 * m.a22 + b.a13 * m.a32;
		this.a22 = b.a21 * m.a12 + b.a22 * m.a22 + b.a23 * m.a32;
		this.a32 = b.a31 * m.a12 + b.a32 * m.a22 + b.a33 * m.a32;

		this.a13 = b.a11 * m.a13 + b.a12 * m.a23 + b.a13 * m.a33;
		this.a23 = b.a21 * m.a13 + b.a22 * m.a23 + b.a23 * m.a33;
		this.a33 = b.a31 * m.a13 + b.a32 * m.a23 + b.a33 * m.a33;

		return this;
	},

	ApplyMatrix3: function (m) {
		var c11 = this.a11; var c12 = this.a12; var c13 = this.a13;
		var c21 = this.a21; var c22 = this.a22; var c23 = this.a23;
		var c31 = this.a31; var c32 = this.a32; var c33 = this.a33;

		this.a11 = c11 * m.a11 + c12 * m.a21 + c13 * m.a31;
		this.a21 = c21 * m.a11 + c22 * m.a21 + c23 * m.a31;
		this.a31 = c31 * m.a11 + c32 * m.a21 + c33 * m.a31;

		this.a12 = c11 * m.a12 + c12 * m.a22 + c13 * m.a32;
		this.a22 = c21 * m.a12 + c22 * m.a22 + c23 * m.a32;
		this.a32 = c31 * m.a12 + c32 * m.a22 + c33 * m.a32;

		this.a13 = c11 * m.a13 + c12 * m.a23 + c13 * m.a33;
		this.a23 = c21 * m.a13 + c22 * m.a23 + c23 * m.a33;
		this.a33 = c31 * m.a13 + c32 * m.a23 + c33 * m.a33;

		return this;
	},

	Mul: function (m) {
		this.a11 *= m.a11; this.a12 *= m.a12; this.a13 *= m.a13;
		this.a21 *= m.a21; this.a22 *= m.a22; this.a23 *= m.a23;
		this.a31 *= m.a31; this.a32 *= m.a32; this.a33 *= m.a33;

		return this;
	},

	Div: function (m) {
		if (m.a11===0 || m.a12===0 || m.a13===0 || 
			m.a21===0 || m.a22===0 || m.a23===0 || 
			m.a31===0 || m.a32===0 || m.a33===0) 
			{ console.warn('_WARNING: [Matrix3.Div] division by zero'); return this; }

		this.a11 /= m.a11; this.a12 /= m.a12; this.a13 /= m.a13;
		this.a21 /= m.a21; this.a22 /= m.a22; this.a23 /= m.a23;
		this.a31 /= m.a31; this.a32 /= m.a32; this.a33 /= m.a33;

		return this;
	},

	Add: function (m) {
		this.a11 += m.a11; this.a12 += m.a12; this.a13 += m.a13;
		this.a21 += m.a21; this.a22 += m.a22; this.a23 += m.a23;
		this.a31 += m.a31; this.a32 += m.a32; this.a33 += m.a33;

		return this;
	},

	Sub: function (m) {
		this.a11 -= m.a11; this.a12 -= m.a12; this.a13 -= m.a13;
		this.a21 -= m.a21; this.a22 -= m.a22; this.a23 -= m.a23;
		this.a31 -= m.a31; this.a32 -= m.a32; this.a33 -= m.a33;

		return this;
	},

	Pow: function (m) {
		this.a11 = Math.pow(this.a11,m.a11); this.a12 = Math.pow(this.a12,m.a12); this.a13 = Math.pow(this.a13,m.a13);
		this.a21 = Math.pow(this.a21,m.a21); this.a22 = Math.pow(this.a22,m.a22); this.a23 = Math.pow(this.a23,m.a23);
		this.a31 = Math.pow(this.a31,m.a31); this.a32 = Math.pow(this.a32,m.a32); this.a33 = Math.pow(this.a33,m.a33);

		return this;
	},

	/*MATRIX OPERATIONS*/
	MulMatrices: function (m,b) {
		this.a11 = m.a11 * b.a11; this.a12 = m.a12 * b.a12; this.a13 = m.a13 * b.a13;
		this.a21 = m.a21 * b.a21; this.a22 = m.a22 * b.a22; this.a23 = m.a23 * b.a23;
		this.a31 = m.a31 * b.a31; this.a32 = m.a32 * b.a32; this.a33 = m.a33 * b.a33;

		return this;
	},

	DivMatrices: function (m,b) {
		if (b.a11===0 || b.a12===0 || b.a13===0 || 
			b.a21===0 || b.a22===0 || b.a23===0 || 
			b.a31===0 || b.a32===0 || b.a33===0) 
			{ console.warn('_WARNING: [Matrix3.DivMatrices] division by zero'); return this; }

		this.a11 = m.a11 / b.a11; this.a12 = m.a12 / b.a12; this.a13 = m.a13 / b.a13;
		this.a21 = m.a21 / b.a21; this.a22 = m.a22 / b.a22; this.a23 = m.a23 / b.a23;
		this.a31 = m.a31 / b.a31; this.a32 = m.a32 / b.a32; this.a33 = m.a33 / b.a33;

		return this;
	},

	AddMatrices: function (m,b) {
		this.a11 = m.a11 + b.a11; this.a12 = m.a12 + b.a12; this.a13 = m.a13 + b.a13;
		this.a21 = m.a21 + b.a21; this.a22 = m.a22 + b.a22; this.a23 = m.a23 + b.a23;
		this.a31 = m.a31 + b.a31; this.a32 = m.a32 + b.a32; this.a33 = m.a33 + b.a33;

		return this;
	},

	SubMatrices: function (m,b) {
		this.a11 = m.a11 - b.a11; this.a12 = m.a12 - b.a12; this.a13 = m.a13 - b.a13;
		this.a21 = m.a21 - b.a21; this.a22 = m.a22 - b.a22; this.a23 = m.a23 - b.a23;
		this.a31 = m.a31 - b.a31; this.a32 = m.a32 - b.a32; this.a33 = m.a33 - b.a33;

		return this;
	},

	PowMatrices: function (m,b) {
		this.a11 = Math.pow(m.a11, b.a11); this.a12 = Math.pow(m.a12, b.a12); this.a13 = Math.pow(m.a13, b.a13);
		this.a21 = Math.pow(m.a21, b.a21); this.a22 = Math.pow(m.a22, b.a22); this.a23 = Math.pow(m.a23, b.a23);
		this.a31 = Math.pow(m.a31, b.a31); this.a32 = Math.pow(m.a32, b.a32); this.a33 = Math.pow(m.a33, b.a33);

		return this;
	},

	/*SCALAR OPERATIONS*/
	MulScalar: function (c) {
		this.a11 *= c; this.a12 *= c; this.a13 *= c;
		this.a21 *= c; this.a22 *= c; this.a23 *= c;
		this.a31 *= c; this.a32 *= c; this.a33 *= c;

		return this;
	},

	DivScalar: function (c) {
		if (c===0) { console.warn('_WARNING: [Matrix3.DivScalar] division by zero'); return this; }

		var ainv = 1/c;

		this.a11 *= ainv; this.a12 *= ainv; this.a13 *= ainv;
		this.a21 *= ainv; this.a22 *= ainv; this.a23 *= ainv;
		this.a31 *= ainv; this.a32 *= ainv; this.a33 *= ainv;

		return this;
	},

	AddScalar: function (c) {
		this.a11 += c; this.a12 += c; this.a13 += c;
		this.a21 += c; this.a22 += c; this.a23 += c;
		this.a31 += c; this.a32 += c; this.a33 += c;

		return this;
	},

	SubScalar: function (c) {
		this.a11 -= c; this.a12 -= c; this.a13 -= c;
		this.a21 -= c; this.a22 -= c; this.a23 -= c;
		this.a31 -= c; this.a32 -= c; this.a33 -= c;

		return this;
	},

	PowScalar: function (c) {
		this.a11 = Math.pow(this.a11,c); this.a12 = Math.pow(this.a12,c); this.a13 = Math.pow(this.a13,c);
		this.a21 = Math.pow(this.a21,c); this.a22 = Math.pow(this.a22,c); this.a23 = Math.pow(this.a23,c);
		this.a31 = Math.pow(this.a31,c); this.a32 = Math.pow(this.a32,c); this.a33 = Math.pow(this.a33,c);

		return this;
	},

	/*SELF OPPERATINOS*/
	Sqrt: function () {
		this.a11 = Math.sqrt(this.a11); this.a12 = Math.sqrt(this.a12); this.a13 = Math.sqrt(this.a13);
		this.a21 = Math.sqrt(this.a21); this.a22 = Math.sqrt(this.a22); this.a23 = Math.sqrt(this.a23);
		this.a31 = Math.sqrt(this.a31); this.a32 = Math.sqrt(this.a32); this.a33 = Math.sqrt(this.a33);
		
		return this;
	},

	Exp: function () {
		this.a11 = Math.exp(this.a11); this.a12 = Math.exp(this.a12); this.a13 = Math.exp(this.a13);
		this.a21 = Math.exp(this.a21); this.a22 = Math.exp(this.a22); this.a23 = Math.exp(this.a23);
		this.a31 = Math.exp(this.a31); this.a32 = Math.exp(this.a32); this.a33 = Math.exp(this.a33);
		
		return this;
	},

	Log: function () {
		this.a11 = Math.log(this.a11); this.a12 = Math.log(this.a12); this.a13 = Math.log(this.a13);
		this.a21 = Math.log(this.a21); this.a22 = Math.log(this.a22); this.a23 = Math.log(this.a23);
		this.a31 = Math.log(this.a31); this.a32 = Math.log(this.a32); this.a33 = Math.log(this.a33);
		
		return this;
	},


	/*SPECIAL OPPERATINOS*/
	Random: function () {
		this.a11 = Math.rand(); this.a12 = Math.rand(); this.a13 = Math.rand();
		this.a21 = Math.rand(); this.a22 = Math.rand(); this.a23 = Math.rand();
		this.a31 = Math.rand(); this.a32 = Math.rand(); this.a33 = Math.rand();
		
		return this;
	},

	Negate: function () {
		this.a11 = -this.a11; this.a12 = -this.a12; this.a13 = -this.a13;
		this.a21 = -this.a21; this.a22 = -this.a22; this.a23 = -this.a23;
		this.a31 = -this.a31; this.a32 = -this.a32; this.a33 = -this.a33;
		
		return this;
	},

	NegateTranslate: function () {
		this.a13 = -this.a13;
		this.a23 = -this.a23;
		
		return this;
	},

	NegateM2: function () {
		this.a11 = -this.a11; this.a12 = -this.a12;
		this.a21 = -this.a21; this.a22 = -this.a22;
	},

	Abs: function () {
		this.a11 = Math.abs(this.a11); this.a12 = Math.abs(this.a12); this.a13 = Math.abs(this.a13);
		this.a21 = Math.abs(this.a21); this.a22 = Math.abs(this.a22); this.a23 = Math.abs(this.a23);
		this.a31 = Math.abs(this.a31); this.a32 = Math.abs(this.a32); this.a33 = Math.abs(this.a33);
		
		return this;
	},

	Sign: function () {
		this.a11 = Math.sign(this.a11); this.a12 = Math.sign(this.a12); this.a13 = Math.sign(this.a13);
		this.a21 = Math.sign(this.a21); this.a22 = Math.sign(this.a22); this.a23 = Math.sign(this.a23);
		this.a31 = Math.sign(this.a31); this.a32 = Math.sign(this.a32); this.a33 = Math.sign(this.a33);
		
		return this;
	},

	Round: function () {
		this.a11 = Math.round(this.a11); this.a12 = Math.round(this.a12); this.a13 = Math.round(this.a13);
		this.a21 = Math.round(this.a21); this.a22 = Math.round(this.a22); this.a23 = Math.round(this.a23);
		this.a31 = Math.round(this.a31); this.a32 = Math.round(this.a32); this.a33 = Math.round(this.a33);
		
		return this;
	},

	Floor: function () {
		this.a11 = Math.floor(this.a11); this.a12 = Math.floor(this.a12); this.a13 = Math.floor(this.a13);
		this.a21 = Math.floor(this.a21); this.a22 = Math.floor(this.a22); this.a23 = Math.floor(this.a23);
		this.a31 = Math.floor(this.a31); this.a32 = Math.floor(this.a32); this.a33 = Math.floor(this.a33);
		
		return this;
	},

	Ceil: function () {
		this.a11 = Math.ceil(this.a11); this.a12 = Math.ceil(this.a12); this.a13 = Math.ceil(this.a13);
		this.a21 = Math.ceil(this.a21); this.a22 = Math.ceil(this.a22); this.a23 = Math.ceil(this.a23);
		this.a31 = Math.ceil(this.a31); this.a32 = Math.ceil(this.a32); this.a33 = Math.ceil(this.a33);
		
		return this;
	},

	Lerp: function (m,alpha) {
		this.a11 += ( m.a11 - this.a11 ) * alpha; this.a12 += ( m.a12 - this.a12 ) * alpha; this.a13 += ( m.a13 - this.a13 ) * alpha;
		this.a21 += ( m.a21 - this.a21 ) * alpha; this.a22 += ( m.a22 - this.a22 ) * alpha; this.a23 += ( m.a23 - this.a23 ) * alpha;
		this.a31 += ( m.a31 - this.a31 ) * alpha; this.a32 += ( m.a32 - this.a32 ) * alpha; this.a33 += ( m.a33 - this.a33 ) * alpha;

		return this;
	},

	Inc: function () {
		++this.a11; ++this.a12; ++this.a13;
		++this.a21; ++this.a22; ++this.a23;
		++this.a31; ++this.a32; ++this.a33;

		return this;
	},

	Dec: function () {
		--this.a11; --this.a12; --this.a13;
		--this.a21; --this.a22; --this.a23;
		--this.a31; --this.a32; --this.a33;

		return this;
	},

	Transpose: function () {
		var tmp = this.a12; this.a12 = this.a21; this.a21 = tmp;
		tmp = this.a13; this.a13 = this.a31; this.a31 = tmp;
		tmp = this.a32; this.a32 = this.a23; this.a23 = tmp;

		return this;
	},

	Normalize: function () {
		return this.DivScalar(this.Norm(2));
	},

	Norm: function (n) {
		if(n===1){
			return this.a11 + this.a12 + this.a13 + 
        this.a21 + this.a22 + this.a23 + 
        this.a31 + this.a32 + this.a33;
		} else if (n===2) {
			return Math.sqrt( this.a11*this.a11 + this.a12*this.a12 + this.a13*this.a13 + 
                        this.a21*this.a21 + this.a22*this.a22 + this.a23*this.a23 + 
                        this.a31*this.a31 + this.a32*this.a32 + this.a33*this.a33);
		} else if (n===Infinity) {
			return this.MaxElement();
		}

		return Math.pow( Math.pow(this.a11,n) + Math.pow(this.a12,n) + Math.pow(this.a13,n) + 
                     Math.pow(this.a21,n) + Math.pow(this.a22,n) + Math.pow(this.a23,n) + 
                     Math.pow(this.a31,n) + Math.pow(this.a32,n) + Math.pow(this.a33,n),
                     1/n);
	},

	Det: function () {
		return ( this.a11 * this.a22 * this.a33 + 
    			 	 this.a12 * this.a23 * this.a31 + 
      			 this.a13 * this.a21 * this.a32 ) - 
      		 ( this.a13 * this.a22 * this.a31 + 
      			 this.a12 * this.a21 * this.a33 + 
      			 this.a11 * this.a23 * this.a32 );
	},

	Invert: function () {
		var aDet = this.Det();
		
		if(aDet === 0) { console.warn('_WARNING: [Matrix3.Invert] can\'t invert matrix, determinant is 0'); return this; }

		this.MulScalar(1/aDet);

		return this;
	},

	MaxElement: function () {
		return Math.max(this.a11, this.a12, this.a13, this.a21, this.a22, this.a23, this.a31, this.a32, this.a33);
	},

	MinElement: function () {
		return Math.min(this.a11, this.a12, this.a13, this.a21, this.a22, this.a23, this.a31, this.a32, this.a33);
	},

	/*SETTERS*/
	Set: function (a11, a12, a13, a21, a22, a23, a31, a32, a33) {
		this.a11 = a11; this.a12 = a12; this.a13 = a13;
		this.a21 = a21; this.a22 = a22; this.a23 = a23;
		this.a31 = a31; this.a32 = a32; this.a33 = a33;

		return this;
	},

	Set2: function (a11, a12, a13, a21, a22, a23) {
		this.a11 = a11; this.a12 = a12; this.a13 = a13; 
		this.a21 = a21; this.a22 = a22; this.a23 = a23;

		return this;
	},

	SetM2: function (a11, a12, a21, a22) {
		this.a11 = a11; this.a12 = a12;
		this.a21 = a21; this.a22 = a22;

		return this;
	},

	SetVector2: function (c1,c2,c3) {
		this.a11 = c1.x; this.a12 = c2.x; this.a13 = c3.x; 
		this.a21 = c1.y; this.a22 = c2.y; this.a23 = c3.y;

		return this;
	},

	SetVectorM2: function (c1, c2) {
		this.a11 = c1.x; this.a12 = c2.x;
		this.a21 = c1.y; this.a22 = c2.y;

		return this;
	},

	SetDiagonal: function (a11, a22, a33) {
		this.a11 = a11; 
		this.a22 = a22;
		this.a33 = a33;

		return this;
	},

	SetDiagonal2: function (a11, a22) {
		this.a11 = a11; 
		this.a22 = a22;

		return this;
	},

	SetVectorDiagonal2D: function (d) {
		this.a11 = d.x;
		this.a22 = d.y;

		return this;
	},

	SetRotate2: function (theta) {
		this.a11 = Math.cos(theta); this.a12 = -Math.sin(theta);
		this.a21 = Math.sin(theta); this.a22 = Math.cos(theta);

		return this;
	},

	SetTranslate2D: function (p) {
		this.a13 = p.x;
		this.a23 = p.y;
	},

	SetTranslate2: function (x, y) {
		this.a13 = x;
		this.a23 = y;
	},

	SetZero: function () {
		this.a11 = this.a12 = this.a13 = this.a21 = this.a22 = this.a23 = this.a31 = this.a32 = this.a33 = 0;

		return this;
	},

	SetOne: function () {
		this.a11 = this.a12 = this.a13 = this.a21 = this.a22 = this.a23 = this.a31 = this.a32 = this.a33 = 1;

		return this;
	},

	SetIdentity: function () {
		this.a11 = 1; this.a12 = 0; this.a13 = 0;
		this.a21 = 0; this.a22 = 1; this.a23 = 0;
		this.a31 = 0; this.a32 = 0; this.a33 = 1;
	},

	SetScalar: function (c) {
		this.a11 = this.a12 = this.a13 = this.a21 = this.a22 = this.a23 = this.a31 = this.a32 = this.a33 = c;

		return this;
	},

	SetA11: function (a11) {
		this.a11 = a11;

		return this;
	},

	SetA12: function (a12) {
		this.a12 = a12;

		return this;
	},

	SetA13: function (a13) {
		this.a13 = a13;

		return this;
	},

	SetA21: function (a21) {
		this.a21 = a21;

		return this;
	},

	SetA22: function (a22) {
		this.a22 = a22;

		return this;
	},

	SetA23: function (a23) {
		this.a23 = a23;

		return this;
	},

	SetA31: function (a31) {
		this.a31 = a31;

		return this;
	},

	SetA32: function (a32) {
		this.a32 = a32;

		return this;
	},

	SetA33: function (a33) {
		this.a33 = a33;

		return this;
	},

	SetNorm: function (l) {
		this.MulScalar( l / this.Norm(2) );

		return this;

	},

	Assign: function (m) {
		this.a11 = m.a11; this.a12 = m.a12; this.a13 = m.a13;
		this.a21 = m.a21; this.a22 = m.a22; this.a23 = m.a23;
		this.a31 = m.a31; this.a32 = m.a32; this.a33 = m.a33;

		return this;
	},

	AssignNegate: function (m) {
		this.a11 = -m.a11; this.a12 = -m.a12; this.a13 = -m.a13;
		this.a21 = -m.a21; this.a22 = -m.a22; this.a23 = -m.a23;
		this.a31 = -m.a31; this.a32 = -m.a32; this.a33 = -m.a33;

		return this;
	},

	AssignMax: function (m) {
		this.a11 = Math.max(this.a11,m.a11); this.a12 = Math.max(this.a12,m.a12); this.a13 = Math.max(this.a13,m.a13);
		this.a21 = Math.max(this.a21,m.a21); this.a22 = Math.max(this.a22,m.a22); this.a23 = Math.max(this.a23,m.a23);
		this.a31 = Math.max(this.a31,m.a31); this.a32 = Math.max(this.a32,m.a32); this.a33 = Math.max(this.a33,m.a33);

		return this;
	},

	AssignMin: function (m) {
		this.a11 = Math.min(this.a11,m.a11); this.a12 = Math.min(this.a12,m.a12); this.a13 = Math.min(this.a13,m.a13);
		this.a21 = Math.min(this.a21,m.a21); this.a22 = Math.min(this.a22,m.a22); this.a23 = Math.min(this.a23,m.a23);
		this.a31 = Math.min(this.a31,m.a31); this.a32 = Math.min(this.a32,m.a32); this.a33 = Math.min(this.a33,m.a33);

		return this;
	},

	Copy: function () {
		return new ENGINE2D.Matrix3().Set(
			this.a11, this.a12, this.a13, 
			this.a21, this.a22, this.a23, 
			this.a31, this.a32, this.a33
		);
	},

	Equals: function (m) {
		return (this.a11 == m.a11) && 
      (this.a12 == m.a12) && 
      (this.a13 == m.a13) && 
      (this.a21 == m.a21) && 
      (this.a22 == m.a22) && 
      (this.a23 == m.a23) && 
      (this.a31 == m.a31) && 
      (this.a32 == m.a32) && 
      (this.a33 == m.a33);
	},

	ZeroEps: function (eps) {
		if ( Math.abs(this.a11) <= eps ) { this.a11=0; }
		if ( Math.abs(this.a12) <= eps ) { this.a12=0; }
		if ( Math.abs(this.a13) <= eps ) { this.a13=0; }
		if ( Math.abs(this.a21) <= eps ) { this.a21=0; }
		if ( Math.abs(this.a22) <= eps ) { this.a22=0; }
		if ( Math.abs(this.a23) <= eps ) { this.a23=0; }
		if ( Math.abs(this.a31) <= eps ) { this.a31=0; }
		if ( Math.abs(this.a32) <= eps ) { this.a32=0; }
		if ( Math.abs(this.a33) <= eps ) { this.a33=0; }

		return this;
	},

	EqualEps: function (m,eps) {
		if ( Math.abs(this.a11-m.a11) <= eps ) { this.a11=m.a11; }
		if ( Math.abs(this.a12-m.a12) <= eps ) { this.a12=m.a12; }
		if ( Math.abs(this.a13-m.a13) <= eps ) { this.a13=m.a13; }
		if ( Math.abs(this.a21-m.a21) <= eps ) { this.a21=m.a21; }
		if ( Math.abs(this.a22-m.a22) <= eps ) { this.a22=m.a22; }
		if ( Math.abs(this.a23-m.a23) <= eps ) { this.a23=m.a23; }
		if ( Math.abs(this.a31-m.a31) <= eps ) { this.a31=m.a31; }
		if ( Math.abs(this.a32-m.a32) <= eps ) { this.a32=m.a32; }
		if ( Math.abs(this.a33-m.a33) <= eps ) { this.a33=m.a33; }

		return this;
	},

	Clamp: function (min, max) {
		this.a11 = this.a11 < min ? min : (this.a11 > max ? max : this.a11 );
		this.a12 = this.a12 < min ? min : (this.a12 > max ? max : this.a12 );
		this.a13 = this.a13 < min ? min : (this.a13 > max ? max : this.a13 );
		this.a21 = this.a21 < min ? min : (this.a21 > max ? max : this.a21 );
		this.a22 = this.a22 < min ? min : (this.a22 > max ? max : this.a22 );
		this.a23 = this.a23 < min ? min : (this.a23 > max ? max : this.a23 );
		this.a31 = this.a31 < min ? min : (this.a31 > max ? max : this.a31 );
		this.a32 = this.a32 < min ? min : (this.a32 > max ? max : this.a32 );
		this.a33 = this.a33 < min ? min : (this.a33 > max ? max : this.a33 );

		return this;
	},

	/*CHECKS*/
	EqualsEps: function (m,eps) {
		return ( Math.abs( this.a11 - m.a11 ) <= eps ) && 
      ( Math.abs( this.a12 - m.a12 ) <= eps ) && 
      ( Math.abs( this.a13 - m.a13 ) <= eps ) && 
      ( Math.abs( this.a21 - m.a21 ) <= eps ) && 
      ( Math.abs( this.a22 - m.a22 ) <= eps ) && 
      ( Math.abs( this.a23 - m.a23 ) <= eps ) && 
      ( Math.abs( this.a31 - m.a31 ) <= eps ) && 
      ( Math.abs( this.a32 - m.a32 ) <= eps ) && 
      ( Math.abs( this.a33 - m.a33 ) <= eps );
	},

	Iszero: function (eps) {
		return ( Math.abs( this.a11 ) <= eps ) && 
      ( Math.abs( this.a12 ) <= eps ) && 
      ( Math.abs( this.a13 ) <= eps ) && 
      ( Math.abs( this.a21 ) <= eps ) && 
      ( Math.abs( this.a22 ) <= eps ) && 
      ( Math.abs( this.a23 ) <= eps ) && 
      ( Math.abs( this.a31 ) <= eps ) && 
      ( Math.abs( this.a32 ) <= eps ) && 
      ( Math.abs( this.a33 ) <= eps );
	}
};
ENGINE2D.Vector = function (properties) {
	this.properties = properties;
};

ENGINE2D.Vector.prototype = {

	constructor: ENGINE2D.Vector,

	Set: function (propertie, value) {
		this.properties[propertie] = value;

		return this;
	},

	UnSet: function (propertie) {
		delete this.properties[propertie];

		return this;
	},

	Merge: function (vector) {
		for ( var propertie in vector) {
			if (vector.hasOwnProperty(propertie)) {
				this.properties[propertie] = vector[propertie];
			}
		}
		return this;
	},

	Assign: function (vector) {
		this.properties = {};
		this.Merge(vector);
		return this;
	},

	Copy: function () {
		return new ENGINE2D.Vector(this.properties.concat());
	},

	ApplyVector: function (operator, vector) {
		for ( var propertie in vector) {
			if (vector.hasOwnProperty(propertie)) {
				this._ApplyOperation(propertie, operator, this.properties[propertie]);
			}
		}
	},

	ApplyVector2: function (operators, vector) {
		for ( var propertie in vector) {
			if (vector.hasOwnProperty(propertie)) {
				this._ApplyOperation(propertie, operators[propertie], this.properties[propertie]);
			}
		}
	},

	Get: function (propertie) {
		return this.properties[propertie];
	},

	GetProperties: function () {
		return this.properties;
	},

	_ApplyOperation: function (propertie, operator, value) {
		if(operator === undefined || value === undefined) {
			console.error('_ERROR: [Vector._ApplyOperation] operator or argument undefined');
			return;
		}

		switch (operator) {
			case ENGINE2D.VECTOROP_ADD: {
				this.properties[propertie] += value;
			} break;
			case ENGINE2D.VECTOROP_SUB: {
				this.properties[propertie] -= value;
			} break;
			case ENGINE2D.VECTOROP_MUL: {
				this.properties[propertie] *= value;
			} break;
			case ENGINE2D.VECTOROP_DIV: {
				if (value===0) { console.warn('_WARNING: [Vector._ApplyOperation] division by zero'); return; }
				var invvalue = 1/value;
				this.properties[propertie] *= invvalue;
			} break;
			case ENGINE2D.VECTOROP_POW: {
				this.properties[propertie] = Math.pow(this.properties[propertie],value);
			} break;
			case ENGINE2D.VECTOROP_ASS: {
				this.properties[propertie] = value;
			} break;
			default: { 
				console.warn('_WARNING: [Vector._ApplyOperation] invalid type.');
			}
		}
	}
};
ENGINE2D.Promise = function () {
	this.isDone = false;
	this.data = undefined;
};

ENGINE2D.Promise.prototype = {

	constructor: ENGINE2D.Promise,

};
ENGINE2D.LogManager = function (url) {
	this.totalMessages = 0;
	this.messageBuffer = {};
	this.url = url;
};

ENGINE2D.LogManager.prototype = {

	constructor: ENGINE2D.LogManager,

	SetUp: function () {
		/* TODO */
		console.log('_SUCCESS: [LogManager.SetUp]');
	},

	ShutDown: function () {
		/* TODO */
		this.Info('totalMessages ' + this.totalMessages);
		this.Flush();
		this.messageBuffer = {};
		console.log('_SUCCESS: [LogManager.ShutDown]');
	},

	Log: function (message) {
		this._Push('Log: ' + message);
	},

	Info: function (message) {
		this._Push('Info: ' + message);
	},

	Success: function (message) {
		this._Push('Success: ' + message);
	},

	Warning: function (message) {
		this._Push('Warning: ' + message);
	},

	Error: function (message) {
		this._Push('Error: ' + message);
	},

	Debug: function (message) {
		this._Push('Debug: ' + message);
	},

	Flush: function () {
		/* TODO MORE write logs to url */
		var oldBuffer = this.messageBuffer;
		this.messageBuffer = {};
		for (var message in oldBuffer) {
			if (oldBuffer.hasOwnProperty(message)) {
				var messageInfo = oldBuffer[message];
				var postFix = ' -- {' + messageInfo.count + ':' + messageInfo.date + '}';
				console.log(message + postFix);
			}
		}
	},

	_Push: function (message) {		
		++this.totalMessages;

		var messageInfo = this.messageBuffer[message];
		
		if (messageInfo === undefined) {
			messageInfo = { count: 0, date: Date.now() };
			this.messageBuffer[message] = messageInfo;
		}

		++messageInfo.count;
		messageInfo.date = Date.now();
	}
};
ENGINE2D.LoadingManager = function (logManager) {
	this.logManager = logManager;
	this.loadedItems = 0;
	this.totalItems = 0;
	this.isReady = true;
};

ENGINE2D.LoadingManager.prototype = {

	constructor: ENGINE2D.LoadingManager,

	SetUp: function () {
		/* TODO */
		this.logManager.Success('[LoadingManager.SetUp]');
	},

	ShutDown: function () {
		/* TODO */
		this.logManager.Success('[LoadingManager.ShutDown]');
	},

	ItemStart: function (url) {
		++this.totalItems;
		this.isReady = false;
	},

	ItemEnd: function (url) {
		++this.loadedItems;

		this.OnProgress(url, this.loadedItems, this.totalItems);

		if (this.loadedItems === this.totalItems) {
			this.OnLoad();
			this.isReady = true;
		}
	},

	Reset: function () {
		this.loadedItems = 0;
		this.totalItems = 0;
	},

	OnProgress: function (item, loaded, total) {
		/*INTERFACE*/
		this.logManager.Info('[LoadingManager.OnProgress] item "' + item + '" ' + loaded + '/' + total + '.');
	},

	OnLoad: function () {
		/*INTERFACE*/
		this.logManager.Info('[LoadingManager.OnLoad] items done');
	},

	OnError: function (errorEvent) {
		/*INTERFACE*/
		this.logManager.Error('[LoadingManager.OnError] ' + errorEvent.message);
	}
};
ENGINE2D.Cache = function () {

	this.resources = {};

};

ENGINE2D.Cache.prototype = {

	constructor: ENGINE2D.Cache,

	Add: function ( key, resource ) {
		this.resources[key] = resource;
	},

	Remove: function (key) {
		delete this.resources[key];
	},

	Get: function (key) {
		return this.resources[key];
	},

	Clear: function () {
		this.resources = {};
	}

};
ENGINE2D.Loader = function (loadingManager, logManager) {
	this.logManager = logManager;
	this.loadingManager = loadingManager;

	this.cache = new ENGINE2D.Cache();
};

ENGINE2D.Loader.prototype = {

	constructor: ENGINE2D.Loader,

	SetUp: function () {
		/*INTERFACE*/
		this.logManager.Success('[Loader.SetUp]');
	},

	ShutDown: function () {
		/*INTERFACE*/
		this.logManager.Success('[Loader.ShutDown]');
	},

	Load: function (url) {
		/*INTERFACE*/
		console.error('_ERROR: [Loader.Load] function not yet implemented');
	}
};
ENGINE2D.Simulator = function (loadingManager, logManager) {
	this.logManager = logManager;
	this.loadingManager = loadingManager;

	this.container = undefined;
	this.isFixedSize = false;

	this.game = undefined;
	this.messageQueue = undefined;
	this.renderer = undefined;
};

ENGINE2D.Simulator.prototype = {

	constructor: ENGINE2D.Simulator,

	BeforeSetUp: function () {
		/*INTERFACE*/
		console.error('_ERROR: [Simulator.BefourSetUp] function not yet implemented');
	},

	OnSetUp: function () {
		/*INTERFACE*/
		console.error('_ERROR: [Simulator.OnSetUp] function not yet implemented');
	},

	OnShutDown: function () {
		/*INTERFACE*/
		console.error('_ERROR: [Simulator.OnShutDown] function not yet implemented');
	},

	OnInterpolate: function (alpha) {
		/*INTERFACE*/
		console.error('_ERROR: [Simulator.OnInterpolate] function not yet implemented');
	},

	OnDisplay: function () {
		var gameState = this.game.GetGameState();
		this.renderer.Render(gameState.GetScene(), gameState.GetCamera());
		/*audio not yet implemented souds have to be blended togeter and played*/
		/*this.audioRenderer.Render(gameState.GetScene(), gameState.GetCamera())*/
	},

	OnResize: function () {
		if (this.isFixedSize) { return; }
		this.renderer.SetDisplaySize(window.innerWidth,window.innerHeight);
	},

	SetUp: function () {
		/*TODO MORE*/
		if (this.game === undefined) {
			this.logManager.Error('[Simulator.SetUp] game is not set yet.');
			return;
		}

		this.loadingManager.ItemStart();
		this.container = document.createElement('div');
		this.renderer.AddCanvasTo(this.container);
		
		window.addEventListener('resize', this.OnResize.bind(this), false ); 
		this.OnResize();

		this.container.addEventListener('contextmenu', function (event) { event.preventDefault(); }, false);
		document.body.appendChild(this.container);

		this.OnSetUp();

		this.loadingManager.ItemEnd('Simulator.SetUp');
		this.logManager.Success('[Simulator.SetUp]');
	},

	ShutDown: function () {
		/*TODO MORE*/
		this.loadingManager.ItemStart();
		
		this.OnShutDown();

		this.loadingManager.ItemEnd('Simulator.ShutDown');
		this.logManager.Success('[Simulator.ShutDown]');
	},

	SetGame: function (game) {
		this.game = game;

		this.messageQueue = game.GetMessageQueue();
		this.renderer = game.GetRenderer();

		return this;
	},

	SetFixedSize: function (isFixedSize) {
		this.isFixedSize = isFixedSize;
	},

	OnSimulate: function (t, dt) {
		/*INTERFACE*/
		console.error('_ERROR: [Simulator.OnSimulate] function not yet implemented');
	},

	GetRenderer: function () {
		return this.renderer;
	},

	GetGame: function () {
		return this.game;
	},

	GetMessageQueue: function () {
		return this.messageQueue;
	}
};
ENGINE2D.Renderer = function (logManager) {
	this.logManager = logManager;
	this.clearColor = ENGINE2D.DEFAULT_CLEARCOLOR;
	this.width = ENGINE2D.DEFAULT_RENDERWIDTH;
	this.height = ENGINE2D.DEFAULT_RENDERHEIGHT;
	this.canvas = undefined;
	this.context = undefined;

	this.projectionMatrix = new ENGINE2D.Matrix3();
	this.projectionMatrix.a33 = -1;
};

ENGINE2D.Renderer.prototype = {

	constructor: ENGINE2D.Renderer,

	SetDisplaySize: function (width,height) {
		if( this.canvas===null ) { 
			this.logManager.Warning('[Renderer.SetDisplaySize] canvas is not set yet.'); 
			return; 
		}

		this.width = width;
		this.height = height;
		this.canvas.width = this.width;
		this.canvas.height = this.height;
		this.projectionMatrix.Set2(1.0, 0.0, this.width / 2, 0.0, 1.0, this.height / 2);
	},

	SetUp: function () {
		/*TODO MORE*/
		this.canvas = document.createElement("canvas");
		this.context = this.canvas.getContext('2d');
		this.SetDisplaySize(ENGINE2D.DEFAULT_RENDERWIDTH, ENGINE2D.DEFAULT_RENDERHEIGHT);

		this.logManager.Success('[Renderer.SetUp]');
	},

	ShutDown: function () {
		/*TODO MORE*/
		this.logManager.Success('[Renderer.ShutDown]');
	},

	Render: function (scene,camera) {
		if( this.context===null ) { 
			this.logManager.Warning('[Renderer.Render] context is not set yet.'); 
			return; 
		}

		this.context.save();
		this.context.fillStyle=this.clearColor;
		this.context.fillRect(0,0,this.width,this.height);
		
		this._DrawObjects(scene,camera);

		this.context.restore();
	},

	FullScreen: function () {
		/* TODO */
		console.error('_ERROR: [Renderer.FullScreen] function not yet implemented');
	},

	AddCanvasTo: function (container) {
		container.appendChild(this.canvas);
	},

	RemoveCanvasFrom: function (container) {
		container.removeChild(this.canvas);
	},

	_DrawObjects: function (scene, camera) {
		var viewMatrix = camera.GetViewMatrix();

		scene._SortRenderables();

		for (var i = scene.renderables.length - 1; i >= 0; i--) {
			var object = scene.renderables[i];
			
			if (object.isDisabled || !object.isVisible) {
				continue;
			}

			this._DrawObject(object, viewMatrix);
		}
	},

	_DrawObject: function (object, viewMatrix) {
		/* This is wrong since we ignore layers*/
		var material = object.material;
		var pivot = new ENGINE2D.Vector2(material.frame.x/2, material.frame.y/2);
		var MVP = new ENGINE2D.Matrix3();
		/* Better Interpolation animation needed for imag now we just use round 
		 * but image interpolation is heavy, though current solution gives us 
		 * artifacts during animation play.
		 */
		var frames = Math.round(object.stateTime * material.fps);
		frames = (material.loop ? (frames % material.fps) : Math.max(0,Math.min(frames, material.fps - 1)));

		MVP.ApplyMatrices3(this.projectionMatrix, viewMatrix);
		MVP.ApplyMatrix3(object.modelMatrix);

		this.context.setTransform(MVP.a11, MVP.a21, MVP.a12, MVP.a22, MVP.a13, MVP.a23);
		/* DEBUG START */
		if (material.rawImage === undefined || material.rawImage.src === undefined) {
			/*should apply clipping*/
			var points = object.geometry.pointSequence;
			this.context.fillStyle = ENGINE2D.DEFAULT_FILLCOLOR;
			this.context.strokeStyle = ENGINE2D.DEFAULT_LINECOLOR;
			this.context.beginPath();
			for (var i = points.length - 1; i >= 0; i--) {
				var point = points[i];
				if (i === points.length - 1) { this.context.moveTo(point.x, point.y); } 
				else { this.context.lineTo(point.x, point.y); }
			}
			this.context.closePath();
			this.context.fill();
			this.context.stroke();
			return;
		}
		/* DEBUG END */

		this.context.drawImage(
			material.rawImage,
			frames * material.frame.x,
			object.state * material.frame.y,
			material.frame.x,
			material.frame.y,
			-pivot.x,
			-pivot.y,
			material.frame.x,
			material.frame.y
		);
	}
};
ENGINE2D.AudioRenderer = function (logManager) {
	this.logManager = logManager;
	this.volume = 1.0;
	this.audio = undefined;
	this.container = undefined;

	/* TODO */
	console.error('_ERROR: [AudioRenderer.AudioRenderer] function not yet implemented');
};

ENGINE2D.AudioRenderer.prototype = {

	constructor: ENGINE2D.AudioRenderer,

	SetVolume: function (volume) {
		this.volume = volume;
	},

	SetUp: function () {
		/* TODO */
		console.error('_ERROR: [AudioRenderer.SetUp] function not yet implemented');
	},

	ShutDown: function () {
		/*TODO MORE*/
		this.logManager.Success('[AudioRenderer.ShutDown]');
	},

	/*TODO Maybe pass interval object*/
	Render: function (scene,camera) {
		/* TODO */
		console.error('_ERROR: [AudioRenderer.Render] function not yet implemented');
	},

	AddAudioTo: function (container) {
		container.appendChild(this.canvas);
	},

	RemoveAudioFrom: function (container) {
		container.removeChild(this.canvas);
	},

	_BlendAudios: function (scene, camera) {
		/* TODO */
		console.error('_ERROR: [AudioRenderer._BlendAudios] function not yet implemented');
	},

	_PlayAudio: function (object, viewMatrix) {
		/* TODO */
		console.error('_ERROR: [AudioRenderer._PlayAudio] function not yet implemented');
	}
};
ENGINE2D.Interval = function (logManager) {
	this.logManager = logManager;
	this.dt = ENGINE2D.DEFAULT_DT;
	this.dtMax = ENGINE2D.DEFAULT_DTMAX;
	this.frameTime = 0.0;
	this.realFrameTime = 0.0;
	this.accumTime = 0.0;
	this.totalTime = 0.0;
	this.alpha = 0.0;
	this.startTime = Date.now();
	this.lastTime = this.startTime;
	this.newTime = this.startTime;
};

ENGINE2D.Interval.prototype = {

	constructor: ENGINE2D.Interval,

	Frame: function (simulator) {
		this.newTime = Date.now();
		this.realFrameTime = (this.newTime - this.lastTime) / 1000.0;
		this.frameTime = this.realFrameTime;
		
		if (this.frameTime > this.dtMax) { this.frameTime = this.dtMax; }

		this.accumTime += this.frameTime;

		while (this.accumTime >= this.dt) {
			simulator.OnSimulate(this.totaltime, this.dt);
			
			this.accumTime -= this.dt;
			this.totalTime += this.dt;
		}

		this.alpha = this.accumTime / this.dt;
		simulator.OnInterpolate(this.alpha);
		
		simulator.OnDisplay();
    
		this.lastTime = this.newTime;
	},

	GetFPS: function () {
		if (this.realFrameTime === 0.0) { return Infinity; } 
		return 1.0 / this.realFrameTime;
	},
	
	SetDt: function (dt) {
		this.dt = dt;
	},
	
	SetDtMax: function (dtMax) {
		this.dtMax = dtMax;
	}
};
ENGINE2D.Message = function (type, rank, data) {
	this.type = type;
	this.rank = rank;
	this.data = data;
};

ENGINE2D.Message.prototype = {

	constructor: ENGINE2D.Message,

	GetData: function () {
		return this.data;
	}
};
ENGINE2D.MessageQueue = function (logManager) {
	this.logManager = logManager;
};

ENGINE2D.MessageQueue.prototype = {

	constructor: ENGINE2D.MessageQueue,

	Queue: function (message) {
		/* TODO */
		console.error('_ERROR: [MessageQueue.Queue] function not yet implemented');
	},

	EnQueue: function () {
		/* TODO */
		console.error('_ERROR: [MessageQueue.EnQueue] function not yet implemented');
	},

	EnQueueType: function (type) {
		/* TODO */
		console.error('_ERROR: [MessageQueue.EnQueue] function not yet implemented');
	},

	EnQueueRank: function (rank) {
		/* TODO */
		console.error('_ERROR: [MessageQueue.EnQueue] function not yet implemented');
	},

	EnQueueTypeRank: function (type, rank) {
		/* TODO */
		console.error('_ERROR: [MessageQueue.EnQueue] function not yet implemented');
	}
};
ENGINE2D.Game = function (interval, renderer, simulator, logManager, loadingManager) {
	this.logManager = logManager;
	this.loadingManager = loadingManager;

	this.intervalId = undefined;
	this.isInterupted = false;
	this.isInitialized = false;
	this.isStopped = false;
	this.isRunning = false;

	this.loaders = {};
	this.interval = interval;
	this.renderer = renderer;
	this.scenes = [];
	this.geometrys = [];
	this.materials = [];
	this.audios = [];
	this.transitions = [];
	this.evolutions = [];
	this.conditions = [];
	this.objects = []; /*consider adding objects here as well for transition purposes*/
	this.cameras = [];
	this.controls = {};
	this.gameState = undefined;
	this.simulator = simulator;
	this.messageQueue = new ENGINE2D.MessageQueue();
};

ENGINE2D.Game.prototype = {

	constructor: ENGINE2D.Game,

	SetUp: function () {
		/* TODO MORE */
		if (this.isInitialized) {
			this.logManager.Warning('[Game.SetUp] already initialized.');
			return;
		}

		this.logManager.SetUp();
		this.loadingManager.SetUp();
		
		this.loadingManager.Reset();
		this.loadingManager.ItemStart();
		
		this.renderer.SetUp();

		this.simulator.SetGame(this);
		this.simulator.BeforeSetUp();
		
		for (var key in this.loaders) {
			if (this.loaders.hasOwnProperty(key)) {
				this.loaders[key].SetUp();
			}
		}

		this.simulator.SetUp();

		for (var key in this.controls) {
			if (this.controls.hasOwnProperty(key)) {
				this.controls[key].SetUp();
			}
		}
		
		this.loadingManager.ItemEnd('Game.SetUp');

		this.isInitialized = true;
		this.logManager.Success('[Game.SetUp]');
	},

	ShutDown: function () {	
		if (!this.isInitialized) {
			this.logManager.Warning('[Game.ShutDown] already shutdown.');
			return;
		}

		if (this.isRunning) {
			this.logManager.Warning('[Game.ShutDown] still running, interupting now.');
			this.Interupt();
			return;
		}

		this.isInitialized = false;
		this.logManager.Log('[Game.MainLoop] shutting down.');
		
		this.loadingManager.Reset();
		this.loadingManager.ItemStart();

		for (var key in this.controls) {
			if (this.controls.hasOwnProperty(key)) {
				this.controls[key].ShutDown();
			}
		}

		this.simulator.ShutDown();
		
		for (var key in this.loaders) {
			if (this.loaders.hasOwnProperty(key)) {
				this.loaders[key].ShutDown();
			}
		}

		this.renderer.ShutDown();

		this.loadingManager.ItemEnd('Game.ShutDown');
		this.loadingManager.ShutDown();
		this.logManager.ShutDown();

		this.isInterupted = false;
		console.log('_SUCCESS: [Game.ShutDown]');
	},

	MainLoop: function () {
		this.intervalId = window.requestAnimationFrame(this.MainLoop.bind(this));

		if (!this.isInitialized){
			console.error('_ERROR: [Game.MainLoop] not yet initialized.');
			window.cancelAnimationFrame(this.intervalId);
			this.isRunning = false;
			return; 
		}

		if (this.isStopped) {
			window.cancelAnimationFrame(this.intervalId);
			this.isRunning = false;
			if (this.isInterupted)  {
				this.logManager.Log('[Game.MainLoop] being interupted.');
				this.ShutDown(); 
			} else {
				this.logManager.Log('[Game.MainLoop] being stopped.');
			}
			return;
		}
		
		this.interval.Frame(this.simulator);
	},

	Start: function () {
		if (this.isRunning) {
			this.logManager.Warning('[Game.Start] already running.');
			return this;
		}

		this.isInterupted = false;
		this.isStopped = false;
		this.logManager.Log('[Game.Start] entering main loop.');
		this.intervalId = window.requestAnimationFrame(this.MainLoop.bind(this));
		this.isRunning = true;
		return this;
	},

	Stop: function () {
		if (!this.isRunning) {
			this.logManager.Warning('[Game.Stop] already not running.');
			return this; 
		}

		this.isStopped = true;
		return this;
	},

	Interupt: function () {
		if (!this.isRunning) {
			console.warn('_Warning: [Game.Interupt] already not running.');
			return this; 
		}

		this.isInterupted = true;
		this.isStopped = true;
		return this;
	},

	GetSimulator: function () {
		return this.simulator;
	},

	GetRenderer: function () {
		return this.renderer;
	},

	GetMessageQueue: function () {
		return this.messageQueue;
	},

	SetGameState: function (gameState) {
		this.gameState = gameState;

		return this;
	},

	GetGameState: function () {
		return this.gameState;
	},

	AddLoader: function (key, loader) {
		this.loaders[key] = loader;

		return key;
	},

	RemoveLoader: function (key) {
		delete this.loaders[key];

		return this;
	},

	GetLoader: function (key) {
		return this.loaders[key];
	},

	AddAudio: function (audio) {
		audio.uid = this.audios.length;
		this.audios.push(audio);

		return audio.uid;
	},

	GetAudio: function (key) {
		return this.audios[key];
	},

	AddScene: function (scene) {
		scene.uid = this.scenes.length;
		this.scenes.push(scene);

		return scene.uid;
	},

	GetScene: function (key) {
		return this.scenes[key];
	},

	AddGeometry: function (geometry) {
		geometry.uid = this.geometrys.length;
		this.geometrys.push(geometry);

		return geometry.uid;
	},

	GetGeometry: function (key) {
		return this.geometrys[key];
	},

	AddMaterial: function (material) {
		material.uid = this.materials.length;
		this.materials.push(material);

		return material.uid;
	},

	GetMaterial: function (key) {
		return this.materials[key];
	},

	AddTransition: function (transition) {
		transition.uid = this.transitions.length;
		this.transitions.push(transition);

		return transition.uid;
	},

	GetTransition: function (key) {
		return this.transitions[key];
	},

	AddEvolution: function (evolution) {
		evolution.uid = this.evolutions.length;
		this.evolutions.push(evolution);

		return evolution.uid;
	},

	GetEvolution: function (key) {
		return this.evolutions[key];
	},

	AddCondition: function (condition) {
		condition.uid = this.conditions.length;
		this.conditions.push(condition);

		return condition.uid;
	},

	GetCondition: function (key) {
		return this.conditions[key];
	},

	AddCamera: function (camera) {
		camera.uid = this.cameras.length;
		this.cameras.push(camera);

		return camera.uid;
	},

	GetCamera: function (key) {
		return this.cameras[key];
	},

	AddControl: function (key, control) {
		this.controls[key] = control;

		return key;
	},

	GetControl: function (key) {
		return this.controls[key];
	}
};
ENGINE2D.GameState = function (seed) {
	this.camera = undefined;
	this.control = undefined;
	this.scene = undefined;
	this.seed = seed;
	this.flag = 0;
	this.settings = {};
};

ENGINE2D.GameState.prototype = {

	constructor: ENGINE2D.GameState,

	Set: function (setting,value) {
		this.settings[setting] = value;
		return this;
	},

	UnSet: function (setting) {
		delete this.settings[setting];
		return this;
	},

	Get: function (setting) {
		return this.settings[setting];
	},

	SetScene: function (scene) {
		this.scene = scene;

		return this;
	},

	GetScene: function () {
		return this.scene;
	},

	SetCamera: function (camera) {
		this.camera = camera;

		return this;
	},

	GetCamera: function () {
		return this.camera;
	},

	SetControl: function (control) {
		this.control = control;

		return this;
	},

	GetControl: function () {
		return this.control;
	},

	SetFlag: function (flag) {
		this.flag = flag;

		return this;
	},

	GetFlag: function () {
		return this.flag;
	},

	GetSeed: function () {
		return this.seed;
	}
};
ENGINE2D.Audio = function (rawAudio, fps, frame, loop) {
	this.rawAudio = rawAudio;
	this.fps = fps;
	this.frame = frame;
	this.loop = loop;
};

ENGINE2D.Audio.prototype = {

	constructor: ENGINE2D.Audio,

};
ENGINE2D.Material = function (rawImage, fps, frame, loop) {
	this.rawImage = rawImage;
	this.fps = fps;
	this.frame = frame;
	this.loop = loop;
};

ENGINE2D.Material.prototype = {

	constructor: ENGINE2D.Material,

};
ENGINE2D.Geometry = function (pointSequence) {
	this.pointSequence = pointSequence;
};

ENGINE2D.Geometry.prototype = {

	constructor: ENGINE2D.Geometry,

	IsInbound: function (point) {
		/*TODO*/
		console.error('_ERROR: [Geometry.IsInbound] function not yet implemented');
	},

	Intersect: function (point, direction) {
		/*TODO*/
		console.error('_ERROR: [Geometry.Intersect] function not yet implemented');
	}

};
ENGINE2D.TransitionFunction = function (operationSequence) {
	this.operationSequence = operationSequence;
};

ENGINE2D.TransitionFunction.prototype = {

	constructor: ENGINE2D.TransitionFunction,

	Call: function (scene, object) {
		/* TODO MORE */
		console.error('_ERROR: [TransitionFunction.Call] function not yet implemented');
	}

};
ENGINE2D.ConditionFunction = function (cache, loadingManager, logManager) {

};

ENGINE2D.ConditionFunction.prototype = {

	constructor: ENGINE2D.ConditionFunction,

	Validate: function (gameState, object) {
		/*INTERFACE*/
		console.error('_ERROR: [ConditionFunction.Validate] function not yet implemented');
	}

};
ENGINE2D.EvolutionFunction = function () {
	
};

ENGINE2D.EvolutionFunction.prototype = {

	constructor: ENGINE2D.EvolutionFunction,

	Evolve: function (scene, object) {
		/*INTERFACE*/
		console.error('_ERROR: [EvolutionFunction.Evolve] function not yet implemented');
	}

};
ENGINE2D.Object2D = function () {
	this.uid = undefined; /* TODO */
	this.ids = {};
	this.type = -1;
	this.group = -1;
	this.category = -1;
	this.isDisabled = false;
	this.layer = -1;

	this.position = new ENGINE2D.Vector2( 0.0, 0.0 );
	this.direction = new ENGINE2D.Vector2( 0.0, 1.0 );
	
	this.moveTo = new ENGINE2D.Vector2( 0.0, 0.0 );
	this.lookAt = new ENGINE2D.Vector2( 0.0, 1.0 );

	this.scaling = new ENGINE2D.Vector2( 1.0, 1.0 );
	this.rotation = 0.0;
	this.translation = new ENGINE2D.Vector2( 0.0, 0.0 );
	this.transformation = new ENGINE2D.Matrix3();

	this.modelMatrix = new ENGINE2D.Matrix3();
	
	this.parent = null;
	this.childeren = {};
	this.isChangedNormal = false;
	this.isChangedSpecial = false;
	this.isRenderable = false;

	this.isLookAt = true;
	this.isMoveTo = true;
};

ENGINE2D.Object2D.prototype = {
	
	constructor: ENGINE2D.Object2D,

	LookAt: function (p) {
		/* TODO */
		this.isChangedNormal = true;
		this.isLookAt = true;
		this.lookAt.Assign(p);
		/*console.warn('_WARNING: [Object2D.RotateAround] function not yet proper');*/
		return this;
	},

	MoveTo: function (p) {
		/* TODO */
		this.isMoveTo = true;
		this.moveTo.Assign(p);
		/*console.warn('_WARNING: [Object2D.RotateAround] function not yet proper');*/
		return this;
	},

	Translate: function (v) {
		this.isChangedNormal = true;

		this.translation.Add(v);
		
		return this;
	},

	TranslateAlonge: function (axis, d) {
		this.isChangedNormal = true;

		this.translation.Add2( axis.x * d.x, axis.y * d.y );
		
		return this;
	},

	TranslateOn: function (axis, alpha) {
		this.isChangedNormal = true;

		this.translation.Add2( axis.x * alpha, axis.y * alpha );
		
		return this;
	},

	TranslateX: function (dx) {
		this.isChangedNormal = true;

		this.translate.x += dx;
		
		return this;
	},

	TranslateY: function (dy) {
		this.isChangedNormal = true;

		this.translate.y += dy;
		
		return this;
	},

	Rotate: function (theta) {
		this.isChangedNormal = true;

		this.rotation += theta;

		return this;
	},

	RotateAround: function (p, theta) {
		this.isChangedSpecial = true;

		/*TODO checkit*/
		this.rotation.Rotate2(theta);
		this.transformation.ApplyTranslate2(-p.x,-p.y);

		/*console.warn('_WARNING: [Object2D.RotateAround] function not yet proper');*/
		return this;
	},

	ScaleUniform: function (alpha) {
		this.isChangedNormal = true;
		this.scaling.MulScalar(alpha);

		return this;
	},

	Scale: function (v) {
		this.isChangedNormal = true;

		this.scaling.x *= v.x;
		this.scaling.y *= v.y;

		return this;
	},

	ScaleX: function (alpha) {
		this.isChangedNormal = true;

		this.scaling.x *= alpha;

		return this;
	},

	ScaleY: function (alpha) {
		this.isChangedNormal = true;

		this.scaling.y *= alpha;

		return this;
	},

	Transform: function (m) {
		this.isChangedSpecial = true;
		
		this.transformation.ApplyMatrix3(m);

		return this;
	},

	UpdateMatrix: function () {
		/*TODO ensure proper update, still not oke*/
		if (this.isChangedNormal) {
			this.modelMatrix.Rotate2(this.rotation);
			this.modelMatrix.ScaleVector2(this.scaling);
			this.modelMatrix.TranslateVector2(this.translation);
			this.rotation = 0;
			this.scaling.SetOne();
			this.translation.SetZero();
		}
		
		if (this.isChangedSpecial) {
			this.modelMatrix.ApplyMatrix3(this.transformation);
			this.transformation.SetIdentity();
		}

		if (this.isMoveTo) {
			this.modelMatrix.SetTranslate2D(this.moveTo);
			this.position.Assign(this.moveTo);
		}

		if (this.isLookAt) {
			/*TODO SOMETHING
			this.modelMatrix.Set2(a11, a12, a13, a21, a22, a23);
			*/
			this.direction.Assign(this.lookAt);
			this.direction.Normalize();
		}

		this.isChangedSpecial = false;
		this.isChangedNormal = false;

		/*console.warn('_WARNING: [Object2D.UpdateMatrix] function not yet proper');*/

		return this;
	},

	GetModelMatrix: function () {
		return this.modelMatrix;
	},

	GetParent: function () {
		return this.parent;
	},

	GetChildren: function () {
		return this.childeren;
	},

	AddChild: function (object) {
		this.childeren[object.uid] = object;

		return this;
	},

	RemoveChild: function (object) {
		delete this.childeren[object.uid];

		return this;
	},

	SetParent: function (object) {
		this.parent = object;
	},

	ClearChildren: function () {
		this.childeren = {};

		return this;
	}
};
ENGINE2D.Empty = function (position, direction) {
	
	ENGINE2D.Object2D.call(this);
	
	this.type = ENGINE2D.OBJECT2DTYPE_EMPTY;
	
	this.position = position;
	this.direction = direction;

	this.LookAt(direction);
	this.MoveTo(position);
};

ENGINE2D.Empty.prototype = Object.create(ENGINE2D.Object2D.prototype);
ENGINE2D.AudioObject = function (audio, position, direction) {
	
	ENGINE2D.Empty.call(this, position, direction);
	
	this.type = ENGINE2D.OBJECT2DTYPE_AUDIO;
	
	this.audio = audio;
	this.Reset();
};

ENGINE2D.AudioObject.prototype = Object.create(ENGINE2D.Empty.prototype);

ENGINE2D.AudioObject.prototype.Reset = function () {
	this.state = 0;
	this.stateTime = 0.0;
	
	return this;
};

ENGINE2D.AudioObject.prototype.GetState = function () {
	return this.state;
};

ENGINE2D.AudioObject.prototype.GetTimeState = function () {
	return this.timeState;
};

ENGINE2D.AudioObject.prototype.SetState = function (state) {
	this.state = state;
	
	return this;
};

ENGINE2D.AudioObject.prototype.SetTimeState = function (timeState) {
	this.timeState = timeState;
	
	return this;
};
ENGINE2D.Camera = function (position, direction) {

	ENGINE2D.Empty.call(this,position,direction);

	this.type = ENGINE2D.OBJECT2DTYPE_CAMERA;

	this.zoom = 1.0;
	this.SetAspect(ENGINE2D.DEFAULT_RENDERWIDTH / ENGINE2D.DEFAULT_RENDERHEIGHT);
};

ENGINE2D.Camera.prototype = Object.create(ENGINE2D.Empty.prototype);

ENGINE2D.Camera.prototype.SetAspect = function (aspect) {
	this.aspect = aspect;
};

ENGINE2D.Camera.prototype.Zoom = function (alpha) {
	/* TODO Not jet correct*/
	this.zoom *= alpha;
};

ENGINE2D.Camera.prototype.GetViewMatrix = function () {
	return this.GetModelMatrix();
};
ENGINE2D.Boundary = function (geometry, position, direction) {
	
	ENGINE2D.Empty.call(this, position, direction);
	
	this.type = ENGINE2D.OBJECT2DTYPE_BOUNDARY;
	
	this.geometry = geometry;
};

ENGINE2D.Boundary.prototype = Object.create(ENGINE2D.Empty.prototype);

ENGINE2D.Boundary.prototype.IsInbound = function (point) {
	return this.geometry.IsInbound(point);
};

ENGINE2D.Boundary.prototype.Intersect = function (point, direction) {
	return this.geometry.Intersect(point, direction);
};
ENGINE2D.Trigger = function (geometry, transition, condition, position, direction) {
	
	ENGINE2D.Boundary.call(this, geometry, position, direction);
	
	this.type = ENGINE2D.OBJECT2DTYPE_TRIGGER;
	
	this.transition = transition;
	this.condition = condition;
};

ENGINE2D.Trigger.prototype = Object.create(ENGINE2D.Boundary.prototype);

ENGINE2D.Trigger.prototype.Trigger = function (game, gameState, object) {
	if (!this.condition.Validate(gameState, object)) { return this; }
	
	this.transition.Call(game,object);
	
	return this;
};

ENGINE2D.Trigger.prototype.SetTransition = function (transition) {
	this.transition = transition;
	
	return this;
};

ENGINE2D.Trigger.prototype.SetCondition = function (condition) {
	this.condition = condition;
	
	return this;
};
ENGINE2D.StaticObject = function (geometry, material, position, direction) {
	
	ENGINE2D.Trigger.call(this, geometry, undefined, undefined, position, direction);
	
	this.type = ENGINE2D.OBJECT2DTYPE_STATIC;
	this.isRenderable = true;
	this.isVisible = true;
	
	this.material = material;
	this.state = 0;
	this.stateTime = 0.0;
};

ENGINE2D.StaticObject.prototype = Object.create(ENGINE2D.Trigger.prototype);

ENGINE2D.StaticObject.prototype.Reset = function () {
	this.state = 0;
	this.stateTime = 0.0;
	
	return this;
};

ENGINE2D.StaticObject.prototype.GetState = function () {
	return this.state;
};

ENGINE2D.StaticObject.prototype.GetTimeState = function () {
	return this.timeState;
};

ENGINE2D.StaticObject.prototype.SetState = function (state) {
	this.state = state;
	
	return this;
};

ENGINE2D.StaticObject.prototype.SetTimeState = function (timeState) {
	this.timeState = timeState;
	
	return this;
};

ENGINE2D.StaticObject.prototype.SetVisible = function (isVisible) {
	this.isVisible = isVisible;
	
	return this;
};
ENGINE2D.DynamicObject = function (geometry, material, pysicalVector, position, direction) {
	
	ENGINE2D.StaticObject.call(this, geometry, material, undefined, undefined, position, direction);
	
	this.type = ENGINE2D.OBJECT2DTYPE_DYNAMIC;
	
	this.pysicalVector = pysicalVector;
	this.Reset();
};

ENGINE2D.DynamicObject.prototype = Object.create(ENGINE2D.StaticObject.prototype);

ENGINE2D.DynamicObject.prototype.SetPhysicals = function (pysicalVector) {
	this.pysicalVector = pysicalVector;
	
	return this;
};

ENGINE2D.DynamicObject.prototype.GetPhysicals = function () {
	return this.pysicalVector;
};
ENGINE2D.InteractingObject = function (geometry, material, featureVector, evolution, position, direction) {
	
	ENGINE2D.DynamicObject.call(this, geometry, material, undefined, undefined, undefined, position, direction);
	
	this.type = ENGINE2D.OBJECT2DTYPE_INTERACTING;
	
	this.evolution = evolution;
	this.featureVector = featureVector;
};

ENGINE2D.InteractingObject.prototype = Object.create(ENGINE2D.DynamicObject.prototype);

ENGINE2D.InteractingObject.prototype.Interact = function (scene) {
	this.evolution.Evolve(scene, this);
	
	return this;
};

ENGINE2D.InteractingObject.prototype.SetFeatures = function (featureVector) {
	this.featureVector = featureVector;
	
	return this;
};

ENGINE2D.InteractingObject.prototype.SetEvolution = function (evolution) {
	this.evolution = evolution;
	
	return this;
};

ENGINE2D.InteractingObject.prototype.GetFeatures = function () {
	return this.featureVector;
};
ENGINE2D.Scene = function (logManager) {
	this.logManager = logManager;

	this.uid = 0;/*undefined; TODO */
	this.objectDS = undefined;
	this.renderables = [];
	this.emptys = [];
	this.boundarys = [];
	this.triggers = [];
	this.staticObjects = [];
	this.dynamicObjects = [];
	this.interactingObjects = [];
	this.audioObjects = [];
	this.cameras = [];

	this.isSorted = true;

	/* Note that if we use [] than we need
	 * to deframentate the array once in a
	 * certain amound of removes.
	 */
};

ENGINE2D.Scene.prototype = {

	constructor: ENGINE2D.Scene,

	Add: function (object) {
		if (object.ids[this.uid] !== undefined) { 
			this.logManager.Warning('[Scene.Add] object already in this scene.');
			return this; 
		}

		var array = this.GetTypes(object.type);
		var entrys = {id: array.length, index: -1};

		object.ids[this.uid] = entrys;
		array.push(object);

		/* TODO reverse order by layer so rendering
		 * is executed in correct order, sort won't 
		 * work since it will preminantly change, 
		 * avoid copying renderable array each 
		 * iteration.
		 */

		if (object.isRenderable) {
			entrys.index = this.renderables.length;
			this.renderables.push(object);
		}

		this.isSorted = this.renderables.length < 2;

		return this;
	},

	Remove: function (object) {
		var array = this.GetTypes(object.type);
		var entrys = object.ids[this.uid];
		if (entrys === undefined) {
			this.logManager.Warning('[Scene.Remove] object already not in this scene.');
			return this;
		}

		delete array[entrys.id];
		delete object.ids[this.uid];

		if (object.isRenderable) {
			delete this.renderables[entrys.index];
		}

		return this;
	},

	Get: function (type, id) {
		var array = this.GetTypes(type);
		return array[id];
	},

	SetDS: function (objectDS) {
		this.objectDS = objectDS;

		return this;
	},

	UpdateDS: function () {
		/* TODO Recompute DS */
		console.error('_ERROR: [Scene.UpdateDS] function not yet implemented');
	},

	GetDS: function () {
		return this.objectDS;
	},

	UpdateObjects: function () {
		for (var i = this.dynamicObjects.length - 1; i >= 0; i--) {
			this.dynamicObjects[i].UpdateMatrix();
		};

		for (var i = this.interactingObjects.length - 1; i >= 0; i--) {
			this.interactingObjects[i].UpdateMatrix();
		};

		for (var i = this.audioObjects.length - 1; i >= 0; i--) {
			this.audioObjects[i].UpdateMatrix();
		};

		for (var i = this.cameras.length - 1; i >= 0; i--) {
			this.cameras[i].UpdateMatrix();
		};
	},

	GetTypes: function (type) {
		switch (type) {
			case ENGINE2D.OBJECT2DTYPE_EMPTY: {
				return this.emptys;
			}
			case ENGINE2D.OBJECT2DTYPE_BOUNDARY: {
				return this.boundarys;
			}
			case ENGINE2D.OBJECT2DTYPE_TRIGGER: {
				return this.triggers;
			}
			case ENGINE2D.OBJECT2DTYPE_STATIC: {
				return this.staticObjects;
			}
			case ENGINE2D.OBJECT2DTYPE_DYNAMIC: {
				return this.dynamicObjects;
			}
			case ENGINE2D.OBJECT2DTYPE_INTERACTING: {
				return this.interactingObjects;
			}
			case ENGINE2D.OBJECT2DTYPE_AUDIO: {
				return this.audioObjects;
			}
			case ENGINE2D.OBJECT2DTYPE_CAMERA: {
				return this.cameras;
			}
			default: { 
				this.logManager.Warning('[Scene.GetTypes] invalid type.');
				return undefined;
			}
		}
	},

	_SortRenderables: function () {
		if (this.isSorted) {
			return;
		}
		/* TODO SORT and ajust indices
		var array = this.renderables;
		var j = 0;
		for (var i = array.length - 1; i >= 0; i--) {
			if (array[i].layer > array[j].layer) {
				Do something 
				var temp = array[i]; array[i] = array[j]; array[j] = temp;
			}
			Do more
			++j;
		};
		*/
	}
};
ENGINE2D.InputState = function () {
	this.type = -1;
	this.state = -1;
	this.event = undefined;
	this.previous = null;
	this.next = null;
};

ENGINE2D.InputState.prototype = {

	constructor: ENGINE2D.InputState,

	Update: function (type, state, event, previous, next) {
		this.type = type;
		this.state = state;
		this.event = event;
		this.previous = previous;
		this.next = next;

		return this;
	},

	GetNext: function () {
		return this.next;
	},

	GetPrevious: function () {
		return this.previous;
	},

	GetState: function () {
		return this.state;
	},

	GetEvent: function () {
		return this.event;
	}
};ENGINE2D.Control = function (container, logManager) {
	this.logManager = logManager;
	this.container = container;

	this.states = {};
};

ENGINE2D.Control.prototype = {

	constructor: ENGINE2D.Control,

	SetUp: function () {
		/*INTERFACE*/
		console.error('_ERROR: [Control.SetUp] function not yet implemented');
	},

	ShutDown: function () {
		/*INTERFACE*/
		console.error('_ERROR: [Control.ShutDown] function not yet implemented');
	},

	Clear: function () {
		this.states = {};

		return this;
	},

	Update: function (key, state, event, previous, next) {
		var inputState = this.state[key];
		if(inputState === undefined ) {
			this.logManager.Warning('[Control.Update] state not present');
			return this;
		}

		inputState.Update(state, event, previous, next);

		return this;
	},

	AddState: function (key) {
		if(this.state[key] === undefined ) {
			this.state[key] = new ENGINE2D.InputState();
			return this;
		}

		this.logManager.Warning('[Control.AddState] state already present');
		return this;
	},

	RemoveState: function (key) {
		if(this.state[key] === undefined ) {
			this.logManager.Warning('[Control.RemoveState] state already not present');
			return this;
		}

		delete this.state[key];
		
		return this;
	},

	GetState: function (key) {
		if(this.state[key] === undefined ) {
			this.logManager.Warning('[Control.GetState] state not present');
		}

		return this.state[key];
	}

};